# GitLab CI/CD Pipeline for EKS Deployment

variables:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: genai-services-site-ecr
  EKS_CLUSTER: genai-services-site-cluster
  NAMESPACE: default
  APP_NAME: genai-services-site
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: ""

stages:
  - build
  - deploy

before_script:
  - apk add --no-cache curl jq python3 py3-pip
  - pip install awscli
  - aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
  - aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
  - aws configure set region $AWS_REGION

build:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  script:
    # Login to ECR
    - aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $(aws sts get-caller-identity --query Account --output text).dkr.ecr.$AWS_REGION.amazonaws.com
    
    # Build and push Docker image
    - export ECR_REGISTRY=$(aws sts get-caller-identity --query Account --output text).dkr.ecr.$AWS_REGION.amazonaws.com
    - docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$CI_COMMIT_SHA .
    - docker push $ECR_REGISTRY/$ECR_REPOSITORY:$CI_COMMIT_SHA
    - docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$CI_COMMIT_SHA $ECR_REGISTRY/$ECR_REPOSITORY:latest
    - docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
  only:
    - master

deploy:
  stage: deploy
  image: alpine:latest
  script:
    # Install kubectl
    - apk add --no-cache curl
    - curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
    - chmod +x kubectl
    - mv kubectl /usr/local/bin/
    
    # Configure kubectl for EKS
    - aws eks update-kubeconfig --region $AWS_REGION --name $EKS_CLUSTER
    
    # Deploy to EKS
    - export ECR_REGISTRY=$(aws sts get-caller-identity --query Account --output text).dkr.ecr.$AWS_REGION.amazonaws.com
    - kubectl set image deployment/$APP_NAME $APP_NAME=$ECR_REGISTRY/$ECR_REPOSITORY:$CI_COMMIT_SHA -n $NAMESPACE
    - kubectl rollout status deployment/$APP_NAME -n $NAMESPACE
    
    # Verify deployment
    - kubectl get deployment $APP_NAME -n $NAMESPACE
    - kubectl get pods -n $NAMESPACE -l app=$APP_NAME
  only:
    - master
  dependencies:
    - build
